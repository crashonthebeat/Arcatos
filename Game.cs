using Arcatos.Types;
using Arcatos.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace Arcatos
{
    public class Game
    {        
        public bool Playing { get; set; }
        public static World CurrentWorld { get; set; }
        public static Player Player { get; set; }
        public static Dictionary<string,Item> Items { get; set; }
        public static Boxscope Boxscope { get; set; }

        // TODO: Make this a static constructor? Not sure how those work yet
        public Game(string currentSceneId)
        {
            // Load all game items
            Game.Items = LoadItemsCatalog();
            
            // Get WorldId and Scene for Player State
            string worldId = currentSceneId.Split('_')[0];
            Game.CurrentWorld = new World(worldId);
            (var _, Scene currentScene) = CurrentWorld.GetMapObjects(currentSceneId);

            // Load Player (should actually load from file either a saved state or new player state generated by char creation)
            Game.Player = new Player(currentScene);

            // HAIL BOXSCOPE
            Game.Boxscope = new Boxscope();
            Boxscope.UpdateLocal();

            // and now u can play
            this.Playing = true;
        }

        public bool Play()
        {
            Game.Player.CurrentScene.Enter();

            return Prompt();
        }

        // This is the player interface.
        // TODO: This whole interface section will be redone when the game gets more complex.
        // tbh this whole class will probably and definitely change.
        public bool Prompt()
        {
            while (Playing)
            {
                Console.Write("> ");
                string? input = Console.ReadLine();

                if (String.IsNullOrEmpty(input)) 
                {
                    Game.Narrate("You didn't enter a command.");
                    continue;
                }
                else 
                {
                    // Create command object from player input.
                    Command command = new Command(input.ToLower().Split(' '));

                    this.Playing = Game.Player.Execute(command);
                }
            }
            return true;
        }

        // LoadItemsCatalog does the heavy lifting of creating...the items catalog.
        // All items in the game.
        public static Dictionary<string,Item> LoadItemsCatalog()
        {
            // Grab all the item files
            string[] itemFiles = Directory.GetFiles(Path.Combine(Program.Dir, "World", "Items"));
            
            // Load create list for all the json arrays to merge into.
            // I'm sure this part can be made a lot simpler it's just not coming to brain right now.
            List<ItemDto> models = new List<ItemDto>();
            Dictionary<string,Item> list = new Dictionary<string,Item>();

            foreach (string file in itemFiles)
            {
                using FileStream json = File.OpenRead(file);
                //ItemDto[] models = JsonSerializer.Deserialize<ItemDto[]>(json)!;
                models.AddRange(JsonSerializer.Deserialize<ItemDto[]>(json)!);
            }

            foreach (ItemDto dto in models)
            {
                Item item = new Item(dto);
                list.Add(dto.id, item);
            }

            return list;
        }

#region Narration
        // TODO: Canned text to randomize messages for bad input, non-found items, etc. 
        
        // Narrate is a wrapper on top of console.write that takes game narration and presents it to the player.
        // This will have hella overloads, and in fact be broken out into several methods.
        public static void Narrate(string s)
        {
            Console.WriteLine(s);
        }

        // Narrate overload for a list of strings perchance fed by an Entity's examine method that adds extra topics.
        public static void Narrate(string[] raw)
        {
            string joined = "";
            
            foreach (string s in raw)
            {
                joined += $"{s.Trim()} ";
            }

            Game.Narrate(joined);

            // Todo: Wrap strings based on a detected (or set or standard) console CornerSE.
        }
        
    }

#endregion
}
